<?php

function discussion_menu() {
  $items = array();
  $items['assign/question'] = array(
      'title' => 'Assign questions to consultant',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('question_assign_form'),
      'access arguments' => array('router content')
  );
  $items['view/consultant'] = array(
      'title' => 'view an assigned questions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('view_an_assigned_questions_form'),
      'access arguments' => array('consultant content')
  );

  $items['maintain/viewed/node'] = array(
      'title' => 'Questions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('maintain_viewed_questions'),
      'access arguments' => array('check customer role')
  );
  return $items;
}

function discussion_permission() {
  return array(
      'router content' => array(
          'title' => t('Assign Questions to consultants '),
          'description' => t('Router only can access this permission .'),
      ),
      'consultant content' => array(
          'title' => t('view the allocated questions'),
          'description' => t('Consultant view the allocated questions')
      ),
      'check customer role' => array(
          'title' => t('get recently added questions'),
          'description' => t('Customer view an answered questions')
      )
  );
}

function question_assign_form($form, &$form_state) {
  $form = array();

  $form['#tree'] = TRUE;
  $form['user'] = array(
      '#type' => 'select',
      '#title' => t('Consultant'),
      '#required' => TRUE,
      '#description' => t('Display all consultant'),
      '#options' => _get_consultant(),
  );

  $header = array(
      'question' => array('data' => t('Questions'), 'field' => 'n.title'),
      'posted_date' => array('data' => t('Posted Date'), 'field' => 'n.created'),
  );
  $form['questions'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => _get_all_questions(),
      '#empty' => t('No questions to assign')
  );
  $form['pager'] = array(
      '#theme' => 'pager',
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Assign',
      '#prefix' => '<div class ="discussion_form_submit">',
      '#suffix' => '</div>'
  );

  return $form;
}

function question_assign_form_submit($form, &$form_state) {
  drupal_set_message('questions are assigned to consultant');
  $uid = $form_state['values']['user'];
  foreach ($form_state['values']['questions'] as $questions) {
    if (!empty($questions)) {
      $qid = $questions;
      db_insert('consultant_node')
              ->fields(array('uid' => $uid,
                  'qid' => $qid))
              ->execute();
    }
  }
}

function _get_consultant() {
  $empty = array();
  $users = db_select('users', 'u')
          ->fields('u', array('uid', 'name'))
          ->execute();
  foreach ($users as $user) {
    if (!empty($user)) {
      $uid = $user->uid;
      $tot_user = user_load($uid);
      if (!empty($tot_user->roles[3])) {
        $name[$tot_user->uid] = $tot_user->name;
      }
    }
  }
  if (!empty($name)) {
    return $name;
  }
  return $empty;
}

function _get_all_questions() {
  $questions = db_select('node', 'n')
          ->extend('TableSort')
          ->extend('PagerDefault')
          ->limit(15)
          ->fields('n', array('nid', 'title', 'type', 'created'))
          ->condition('type', 'question')
          ->execute();

  $assigned_nodes = db_select('consultant_node', 'c')
          ->fields('c', array('qid'))
          ->execute();
  $i = 0;
  foreach ($assigned_nodes as $assigned_node) {

    if (isset($assigned_node->qid)) {
      $i = $i + 1;
      $qids[$i] = $assigned_node->qid;
      $i++;
    }
  }
  if (!empty($qids)) {
    foreach ($questions as $question) {
      $nid = $question->nid;
      $date = format_date($question->created, $type = 'long');
      // $qid=reset($qids);
      if (!empty($qids)) {
        if (array_search($nid, $qids)) {
          continue;
        } else {
          $all_question[$nid] = array('question' => array(
                  'data' => array(
                      '#type' => 'link',
                      '#title' => $question->title,
                      '#href' => 'node/' . $question->nid
                  ),
              ),
              'posted_date' => array(
                  'data' => array(
                      '#type' => 'link',
                      '#title' => $date,
                      '#href' => 'node/' . $question->nid
                  ),
              ),
          );
        }
      }
    }
  } else {
    foreach ($questions as $question) {
      // $posted_date = $question->created;
      // $date = format_date($question->created, $type = 'medium');
      //$date1 = format_date($question->created, $type = 'short');
      $date = format_date($question->created, $type = 'long');
      // $converted = date('d M Y h.i.s A', strtotime($posted_date));
      $all_question[$question->nid] = array('question' => array(
              'data' => array(
                  '#type' => 'link',
                  '#title' => $question->title,
                  '#href' => 'node/' . $question->nid
              ),
          ),
          'posted_date' => array(
              'data' => array(
                  '#type' => 'link',
                  '#title' => $date,
                  '#href' => 'node/' . $question->nid
              ),
          ),
      );
    }
  }
  if (!empty($all_question)) {
    return $all_question;
  }
}

function view_an_assigned_questions_form($form, &$form_state) {
  global $user;
  $form = array();
  $header = array(
      'question' => array('data' => t('Questions'), 'field' => 'n.title'),
      'posted_date' => array('data' => t('Posted Date'), 'field' => 'n.created'),
      'edit' => array('data' => t('Edit')),
  );
  $form['questions'] = array(
      '#theme' => 'table',
      '#prefix' => '<div id="filtered_questions">',
      '#suffix' => '</div>',
      '#header' => $header,
      '#rows' => _assign_questions_to_particular_consultant(),
      '#empty' => t('Router not assigned the questions')
  );
  $form['pager'] = array(
      '#theme' => 'pager',
  );
 return $form;
}

function _assign_questions_to_particular_consultant() {
  global $user;
  $title = array();
  $uids_qids = db_select('consultant_node', 'u')
          ->fields('u', array('uid', 'qid'))
          ->extend('TableSort')
          ->extend('PagerDefault')
          ->limit(15)
          ->condition('uid', $user->uid, '=')
          ->execute();
  foreach ($uids_qids as $uid_qid) {
    $question_id = $uid_qid->qid;
    if ($user->uid == $uid_qid->uid) {
      $node = node_load($question_id);
      $date = format_date($node->created, 'custom', 'd-M-o');
      $answer_count = $node->field_answer_count['und'][0]['count'];
      if (!empty($answer_count)) {
        $title[$node->nid] = array('question' => array(
                'data' => array(
                    '#type' => 'link',
                    '#title' => $node->title,
                    '#href' => 'node/' . $node->nid
                ),
            ),
            'posted_date' => array(
                'data' => array(
                    '#type' => 'link',
                    '#title' => $date,
                    '#href' => 'node/' . $node->nid
                ),
            ),
            'edit' => array(
                'data' => array(
                    '#type' => 'link',
                    '#title' => 'Edit',
                    '#href' => 'node/' . $node->nid . '/edit'
                ),
            ),
        );
      } else {
        $title[$node->nid] = array('question' => array(
                'data' => array(
                    '#type' => 'link',
                    '#title' => $node->title,
                    '#suffix' => '</div id ="new_class"> New </div>',
                    '#href' => 'node/' . $node->nid
                ),
            ),
            'posted_date' => array(
                'data' => array(
                    '#type' => 'link',
                    '#title' => $date,
                    '#href' => 'node/' . $node->nid
                ),
            ),
            'edit' => array(
                'data' => array(
                    '#type' => 'link',
                    '#title' => 'Edit',
                    '#href' => 'node/' . $node->nid . '/edit'
                ),
            ),
        );
      }
    }
  }
  return $title;
}

function maintain_viewed_questions($form, &$form_state) {
  $header = array(
      'question' => array('data' => t('Questions'), 'field' => 'n.title'),
      'posted_date' => array('data' => t('Posted Date'), 'field' => 'n.created'),
  );
  $form['questions_answers'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => check_questions_viewed_or_not()
  );
  $form['pager'] = array(
      '#theme' => 'pager',
  );

  return $form;
}

function check_questions_viewed_or_not() {
  global $user;
  $title = array();
  $questions = db_select('node', 'n')
          ->fields('n', array('nid', 'title', 'type'))
          ->extend('TableSort')
          ->extend('PagerDefault')
          ->limit(15)
          ->condition('type', 'question')
          ->execute();
  $num_of_questions = $questions->rowCount();
  foreach ($questions as $question) {
    $question_nid = $question->nid;
    $question_node = node_load($question_nid);
    $date = format_date($question_node->created, 'custom', 'd-M-o');
    $q_created_user = $question_node->uid;
    $answer_count = $question_node->field_answer_count[LANGUAGE_NONE][0]['count'];
    if (!empty($answer_count) && ($q_created_user == $user->uid )) {
      $answers = db_select('node', 'n')
              ->fields('n', array('nid', 'title', 'type'))
              ->condition('type', 'answer')
              ->execute();
      foreach ($answers as $answer) {
        $answer_nid = $answer->nid;
        $answer_node = node_load($answer_nid);
        $qid = $answer_node->field_answer_question[LANGUAGE_NONE][0]['nid'];
        if ($qid == $question_nid) {
          $viewed_answer = db_select('node_view_count', 'n')
                  ->fields('n', array('uid', 'nid'))
                  ->condition('uid', $user->uid, '=')
                  ->condition('nid', $answer_nid, '=')
                  ->execute()
                  ->fetchAssoc();
          $viewed_answer_nid = $viewed_answer['nid'];
          if ($answer_nid == $viewed_answer_nid) {
            $title[$question_node->nid] = array('all_question' => array(
                    'data' => array(
                        '#type' => 'link',
                        '#title' => $question->title,
                        '#href' => 'node/' . $question->nid
                    ),
                ),
                'posted_date' => array(
                    'data' => array(
                        '#type' => 'link',
                        '#title' => $date,
                        '#href' => 'node/' . $question->nid
                    ),
                ),
            );
          } else {
            $title[$question_node->nid] = array('all_question' => array(
                    'data' => array(
                        '#type' => 'link',
                        '#title' => $question->title,
                        '#suffix' => '</div id ="new_class"> New </div>',
                        '#href' => 'node/' . $question->nid
                    ),
                ),
                'posted_date' => array(
                    'data' => array(
                        '#type' => 'link',
                        '#title' => $date,
                        '#href' => 'node/' . $question->nid
                    ),
                ),
            );
          }
        }
      }
    } else {
      $title[$question_node->nid] = array('all_question' => array(
              'data' => array(
                  '#type' => 'link',
                  '#title' => $question->title,
                  '#href' => 'node/' . $question->nid
              ),
          ),
          'posted_date' => array(
              'data' => array(
                  '#type' => 'link',
                  '#title' => $date,
                  '#href' => 'node/' . $question->nid
              ),
          ),
      );
    }
  }

  return $title;
}

function _get_all_month() {
  return array(
      '0' => '--Select--', '1' => 'January', '2' => 'February', '3' => 'March', '4' => 'April', '5' => 'May', '6' => 'June', '7' => 'July', '8' => 'August', '9' => 'September', '10' => 'October', '11' => 'November', '12' => 'December'
  );
}

