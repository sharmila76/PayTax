<?php

/**
 * Implements hook_menu().
 */
function maintain_points_menu() {
  $items['maintain_points'] = array(
      'title' => 'Add categories and points',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('maintain_points_form'),
      'access arguments' => array('maintain_points_form_admin_access'),
          //'expanded' => TRUE,
  );
  $items['post_question'] = array(
      'title' => 'Post your question',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('maintain_points_post_question_form'),
      'access arguments' => array('maintain_points_post_question_customer_access'),
          //'expanded' => TRUE,
  );
  return $items;
}

function maintain_points_views_api() {
  return array('api' => 3, 'path' => drupal_get_path('module', 'maintain_points') . '/view',);
}

function maintain_points_permission() {
  return array(
      'maintain_points_form_admin_access' => array(
          'title' => 'maintain_points_access_permission',
          'description' => 'Admin can only view this maintain_points'
      ),
      'maintain_points_post_question_customer_access' => array(
          'title' => 'Maintain points post question',
          'description' => 'Customer only can able to post question'
      ),
  );
}

function maintain_points_form($form, &$form_state, $no_js_use = FALSE) {
  $categories = get_category();
  $points = get_points();
  $num_of_category = count($categories);
  if (!empty($num_of_category)) {
    $form['categories_fieldset'] = array(
        '#prefix' => '<table id="maintain_points_ajax">',
        '#suffix' => '</table>',
        '#tree' => TRUE,
    );
    $form['categories_fieldset']['header'] = array(
        '#markup' => '<thead>
        <tr>
        <th>categories</th>
        <th>points</th>
        </tr>
        </thead>',
    );
    for ($i = 0; $i < $num_of_category; $i++) {
      $form['categories_fieldset']['row_' . $i] = array(
          '#prefix' => '<tr>',
          '#suffix' => '</tr>',
      );
      $form['categories_fieldset']['row_' . $i]['categories'] = array(
          '#type' => 'textfield',
          '#default_value' => $categories[$i],
          '#size' => '15',
          '#prefix' => '<td>',
          '#suffix' => '</td>',
      );
      $form['categories_fieldset']['row_' . $i]['points'] = array(
          '#type' => 'textfield',
          '#size' => '5',
          '#default_value' => $points[$i],
          '#prefix' => '<td>',
          '#suffix' => '</td>'
      );
    }
    $form['categories_fieldset']['submit'] = array(
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        '#type' => 'submit',
        '#value' => 'update',
        '#submit' => array('update_categories_and_points')
    );
  }
  $form['#tree'] = TRUE;
  $form['names_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Category and Points'),
      '#prefix' => '<div id="names-fieldset-wrapper">',
      '#suffix' => '</div>',
  );
  if (empty($form_state['num_names'])) {
    $form_state['num_names'] = 1;
  }
  for ($i = 0; $i < $form_state['num_names']; $i++) {
    $form['names_fieldset']['categories'][$i] = array(
        '#type' => 'fieldset',
    );
    $form['names_fieldset']['categories'][$i]['category'] = array(
        '#type' => 'textfield',
        '#title' => t('Category'),
        '#prefix' => '<table><tr><td>',
        '#suffix' => '</td>',
        '#size' => 20,
    );
    $form['names_fieldset']['categories'][$i]['point'] = array(
        '#type' => 'textfield',
        '#title' => t('Points'),
        '#size' => 20,
        '#prefix' => '<td>',
        '#suffix' => '</td></tr></table>',
    );
  }
  $form['names_fieldset']['add_category_and_points'] = array(
      '#type' => 'submit',
      '#value' => t('Add category and points'),
      '#submit' => array('maintain_points_add_more_add_one'),
      '#ajax' => array(
          'callback' => 'maintain_points_add_more_callback',
          'wrapper' => 'names-fieldset-wrapper',
      ),
  );
  if ($form_state['num_names'] > 1) {
    $form['names_fieldset']['remove_category_and_points'] = array(
        '#type' => 'submit',
        '#value' => t('Remove last one'),
        '#submit' => array('maintain_points_add_more_remove_one'),
        '#ajax' => array(
            'callback' => 'maintain_points_add_more_callback',
            'wrapper' => 'names-fieldset-wrapper',
        ),
    );
  }
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
  );

  return $form;
}

function update_categories_and_points($form, &$form_state) {
  $num_of_rows = count($form_state['values']['categories_fieldset']);
  $num_of_categories = $num_of_rows - 1;
  $categories = get_category();
  $points = get_points();
  for ($i = 0; $i < $num_of_categories; $i++) {
    if ($categories[$i] != $form_state['values']['categories_fieldset']['row_' . $i]['categories']) {
      db_update('categories')
              ->fields(array(
                  'category' => $form_state['values']['categories_fieldset']['row_' . $i]['categories'],
                      //'points' => $form_state['values']['categories_fieldset']['row_' . $i]['points']
              ))
              ->condition('id', $i + 1, '=')
              ->execute();
      drupal_set_message("updated" . ' ' . "category" . ' ' . $form_state['values']['categories_fieldset']['row_' . $i]['categories']);
    } elseif (($points[$i] != $form_state['values']['categories_fieldset']['row_' . $i]['points'])) {
      db_update('categories')
              ->fields(array(
                  //'category' => $form_state['values']['categories_fieldset']['row_' . $i]['categories'],
                  'points' => $form_state['values']['categories_fieldset']['row_' . $i]['points']
              ))
              ->condition('id', $i + 1, '=')
              ->execute();
      drupal_set_message("updated" . ' ' . "Point" . ' ' . $form_state['values']['categories_fieldset']['row_' . $i]['points']);
    }
  }
  // drupal_set_message('updated successfully');
}

function get_category() {
  $categories = db_select('categories', 'c')
          ->fields('c', array('category'))
          ->execute();
  foreach ($categories as $category) {
    if (!empty($category)) {
      $get_categories[] = $category->category;
    }
  }
  if (!empty($get_categories)) {
    return $get_categories;
  }
}

function get_points() {
  $empty = array();
  $points = db_select('categories', 'p')
          ->fields('p', array('points'))
          ->execute();
  foreach ($points as $point) {
    if (!empty($point)) {
      $get_points[] = $point->points;
    }
  }
  if (!empty($get_points)) {
    return $get_points;
  } else {
    return $empty;
  }
}

function maintain_points_add_more_callback($form, $form_state) {
  //dpm($form_state);
  return $form['names_fieldset'];
}

function maintain_points_add_more_add_one($form, &$form_state) {
  $form_state['num_names']++;
  $form_state['rebuild'] = TRUE;
}

function maintain_points_add_more_remove_one($form, &$form_state) {
  if ($form_state['num_names'] > 1) {
    $form_state['num_names']--;
  }
  $form_state['rebuild'] = TRUE;
}

function maintain_points_form_validate($form, &$form_state) {
  /*   * for ($i = 0; $i < $form_state['num_names']; $i++) {
    if (empty($form_state['values']['names_fieldset']['categories'][$i]['category'])) {
    form_set_error('category', t("you should provide the categories"));
    }
    /**  if (!($form_state['values']['names_fieldset']['categories'][$i]['point']) > 0){
    form_set_error('point', t('Negative points not allowed '));
    }
    if (!ctype_alpha(str_replace(' ', '', $form_state['values']['names_fieldset']['categories'][$i]['category']))) {
    form_set_error('category', t('you should enter the category in alphabets '));
    }
    if (empty($form_state['values']['names_fieldset']['categories'][$i]['point'])) {
    form_set_error('point', t("you should provide the points"));
    }
    if (!is_numeric($form_state['values']['names_fieldset']['categories'][$i]['point'])) {
    form_set_error('point', t("you should provide the points in numeric"));
    }
    }* */
}

function maintain_points_form_submit($form, &$form_state) {
  global $user;
  for ($i = 0; $i < $form_state['num_names']; $i++) {
    db_insert('categories')
            ->fields(array(
                'uid' => $user->uid,
                'category' => $form_state['values']['names_fieldset']['categories'][$i]['category'],
                'points' => $form_state['values']['names_fieldset']['categories'][$i]['point'],
            ))
            ->execute();
    drupal_set_message('saved' . ' ' . 'category' . ' ' . $form_state['values']['names_fieldset']['categories'][$i]['category'] . ' ' . 'points' . ' ' . $form_state['values']['names_fieldset']['categories'][$i]['point']);
  }
}

function maintain_points_post_question_form($form, &$form_state) {
  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Question'),
      '#required' => TRUE,
  );
  $categories = get_all_category_points();
  $form['field_select_category_name'] = array(
      '#type' => 'select',
      '#title' => t('Select category'),
      '#description' => t('Category for the question'),
      '#options' => $categories,
      '#required' => TRUE,
  );
  $form['plup'] = array(
      '#type' => 'plupload',
      '#title' => t('Upload files'),
      '#upload_validators' => array(
          'file_validate_extensions' => array('jpg jpeg gif png pdf'),
      ),
      '#plupload_settings' => array(
          'runtimes' => 'html5',
          'chunk_size' => '1mb',
      ),
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Ask Question'),
  );
  drupal_add_js(array('maintain_points' => array('categories_list' => array(json_encode($categories)))), 'setting');
  return $form;
}

function get_all_category_points() {
  $select_category = db_select('categories', 'c')
          ->fields('c', array('category', 'points'))
          ->execute()
          ->fetchAll();
  if (!empty($select_category)) {
    foreach ($select_category as $value) {
      $cat_points[$value->category . '-' . $value->points] = $value->category;
    }
    return $cat_points;
  }
  else {
    return array();
  }
}

function maintain_points_post_question_form_validate($form, &$form_state) {
  $value = $form_state['values']['field_select_category_name'];
  global $user;
  if (in_array('customer', $user->roles)) {
    $cat_value = explode('-', $value);
    //select userpoints
    $userpoints = db_select('userpoints', 'u')
            ->fields('u', array('points'))
            ->condition('uid', $user->uid, '=')
            ->execute()
            ->fetchAssoc();
    if ($cat_value[1] > $userpoints['points']) {
      form_set_error('field_select_category_name', 'You don\'t have sufficient points');
    }
  }
}

function maintain_points_post_question_form_submit($form, &$form_state) {
  $node = new stdClass();
  $node->type = 'question';
  node_object_prepare($node);
  $node->title = $form_state['values']['title'];
  $node->field_notify_p[LANGUAGE_NONE][0]['value'] = 1;
  $node->field_question[LANGUAGE_NONE][0]['value'] = $form_state['values']['title'];
  $value = $form_state['values']['field_select_category_name'];
  $cat_value = explode('-', $value);
  $node->field_select_category[LANGUAGE_NONE][0]['value'] = $cat_value[0];

  $files = $form_state['values']['plup'];
  foreach ($files as $file) {
    $file_name = $file['name'];
    $ext = pathinfo($file_name, PATHINFO_EXTENSION);
    $file_obj = file_uri_to_object($file['tmppath']);
    switch ($ext) {
      case 'pdf':
        $node->field_upload_document[LANGUAGE_NONE][] = save_file($file_obj, $file_name);
        break;
      case 'jpg':
        $node->field_upload_document[LANGUAGE_NONE][] = save_file($file_obj, $file_name);
        break;
      case 'jpeg':
        $node->field_upload_document[LANGUAGE_NONE][] = save_file($file_obj, $file_name);
        break;
      case 'png':
        $node->field_upload_document[LANGUAGE_NONE][] = save_file($file_obj, $file_name);
        break;
      case 'gif':
        $node->field_upload_document[LANGUAGE_NONE][] = save_file($file_obj, $file_name);
        break;
    }
  }

  node_save($node);

  global $user;
  if (in_array('customer', $user->roles)) {
    $value = $form_state['values']['field_select_category_name'];
    $cat_value = explode('-', $value);
    //select userpoints
    $userpoints = db_select('userpoints', 'u')
            ->fields('u', array('points'))
            ->condition('uid', $user->uid, '=')
            ->execute()
            ->fetchAssoc();
    if ($cat_value[1] <= $userpoints['points']) {
      $reduce_points = $userpoints['points'] - $cat_value[1];
      db_update('userpoints')
              ->fields(array(
                  'points' => $reduce_points,
              ))
              ->condition('uid', $user->uid, '=')
              ->execute();
    }
  }
  
  if($node->nid) {
    drupal_set_message('Posted Successfully');
  }
}

function save_file($tmppath, $name) {
  //move file to public dir
  if ($file = file_move($tmppath, 'public://' . $name)) {
    $file->display = 1;
    $file->description = NULL;
    return (array) $file;
  } else {
    form_set_error('intro', t('Failed to write the uploaded file to the site\'s file folder.'));
  }
}
