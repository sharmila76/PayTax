<?php

/**
 * Implements hook_menu().
 */
function maintain_points_menu() {
  $items['maintain_points'] = array(
      'title' => 'Add categories and points',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('maintain_points_form'),
      'access arguments' => array('maintain_points_form_admin_access'),
          //'expanded' => TRUE,
  );
  return $items;
}

function maintain_points_views_api() {
  return array('api' => 3, 'path' => drupal_get_path('module', 'maintain_points') . '/view',);
}

function maintain_points_permission() {
  return array(
      'maintain_points_form_admin_access' => array(
          'title' => 'maintain_points_access_permission',
          'description' => 'Admin can only view this maintain_points'
      ),
  );
}

function maintain_points_form($form, &$form_state, $no_js_use = FALSE) {
  $form['#tree'] = TRUE;
  $form['names_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Category and Points'),
      '#prefix' => '<div id="names-fieldset-wrapper">',
      '#suffix' => '</div>',
  );
  if (empty($form_state['num_names'])) {
    $form_state['num_names'] = 1;
  }
  for ($i = 0; $i < $form_state['num_names']; $i++) {
    $form['names_fieldset']['categories'][$i] = array(
        '#type' => 'fieldset',
    );
    $form['names_fieldset']['categories'][$i]['category'] = array(
        '#type' => 'textfield',
        '#title' => t('Category'),
        '#prefix' => '<table><tr><td>',
        '#suffix' => '</td>',
        '#size' => 20,
    );
    $form['names_fieldset']['categories'][$i]['point'] = array(
        '#type' => 'textfield',
        '#title' => t('Points'),
        '#size' => 20,
        '#prefix' => '<td>',
        '#suffix' => '</td></tr></table>',
    );
  }
  $form['names_fieldset']['add_category_and_points'] = array(
      '#type' => 'submit',
      '#value' => t('Add category and points'),
      '#submit' => array('maintain_points_add_more_add_one'),
      '#ajax' => array(
          'callback' => 'maintain_points_add_more_callback',
          'wrapper' => 'names-fieldset-wrapper',
      ),
  );
  if ($form_state['num_names'] > 1) {
    $form['names_fieldset']['remove_category_and_points'] = array(
        '#type' => 'submit',
        '#value' => t('Remove last one'),
        '#submit' => array('maintain_points_add_more_remove_one'),
        '#ajax' => array(
            'callback' => 'maintain_points_add_more_callback',
            'wrapper' => 'names-fieldset-wrapper',
        ),
    );
  }
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
  );

  return $form;
}

function maintain_points_add_more_callback($form, $form_state) {
  //dpm($form_state);
  return $form['names_fieldset'];
}

function maintain_points_add_more_add_one($form, &$form_state) {
  $form_state['num_names']++;
  $form_state['rebuild'] = TRUE;
}

function maintain_points_add_more_remove_one($form, &$form_state) {
  if ($form_state['num_names'] > 1) {
    $form_state['num_names']--;
  }
  $form_state['rebuild'] = TRUE;
}

function maintain_points_form_validate($form, &$form_state) {
  for ($i = 0; $i < $form_state['num_names']; $i++) {
    if (empty($form_state['values']['names_fieldset']['categories'][$i]['category'])) {
      form_set_error('category', t("you should provide the categories"));
    }
    /**  if (!($form_state['values']['names_fieldset']['categories'][$i]['point']) > 0){
      form_set_error('point', t('Negative points not allowed '));
      }* */
    if (!ctype_alpha(str_replace(' ', '', $form_state['values']['names_fieldset']['categories'][$i]['category']))) {
      form_set_error('category', t('you should enter the category in alphabets '));
    }
    if (empty($form_state['values']['names_fieldset']['categories'][$i]['point'])) {
      form_set_error('point', t("you should provide the points"));
    }
    if (!is_numeric($form_state['values']['names_fieldset']['categories'][$i]['point'])) {
      form_set_error('point', t("you should provide the points in numeric"));
    }
  }
}

function maintain_points_form_submit($form, &$form_state) {
  global $user;
  for ($i = 0; $i < $form_state['num_names']; $i++) {
    db_insert('categories')
            ->fields(array(
                'uid' => $user->uid,
                'category' => $form_state['values']['names_fieldset']['categories'][$i]['category'],
                'points' => $form_state['values']['names_fieldset']['categories'][$i]['point'],
            ))
            ->execute();
  }
}

function maintain_points_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'question_node_form') {
    //TODO: use auto title module.
    $form['title'] = array(
        '#type' => 'textarea',
        '#rows' => 2,
        '#title' => 'Question',
        '#required' => TRUE,
    );

    $categories = get_all_category();
    $form['field_select_category'] = array(
        '#title' => t('Select Category'),
        '#type' => 'select',
        '#required' => TRUE,
        '#options' => $categories,
        //'#default_value' => 'hai',
    );
    foreach ($categories as $category => $cat_name) {
      $form['field_cat'] = array(
          '#type' => 'container',
          '#states' => array(
              'visible' => array('select[name="field_select_category"]' => array('value' => $cat_name)),
          ),
      );
      $form['field_cat']['markup'] = array(
          '#markup' => 'For this category ' . get_category_points($cat_name) . ' points will be reduced.',
      );
    }

    $form['actions']['submit']['#submit'][] = 'maintain_points_submit_callback_function';
    $form['#validate'][] = 'maintain_points_validate_function';
    unset($form['actions']['preview']);
    unset($form['field_notify_p']);
    return $form;
  }
}

function get_category_points($cat_name) {
  $select_points = db_select('categories', 'c')
          ->fields('c', array('points'))
          ->condition('category', $cat_name)
          ->execute()
          ->fetchAssoc();
  return $select_points['points'];
}

function get_all_category() {
  $select_category = db_select('categories', 'c')
          ->fields('c', array('category'))
          ->execute()
          ->fetchAll();
  foreach ($select_category as $value) {
    $cat_points[$value->category] = $value->category;
  }
  return $cat_points;
}

function maintain_points_validate_function(&$form, &$form_state) {
  $value = $form_state['values']['field_select_category']['und'][0]['value'];
  global $user;
  if (in_array('customer', $user->roles)) {
    $cat_value = explode('--', $value);
    //select userpoints
    $userpoints = db_select('userpoints', 'u')
            ->fields('u', array('points'))
            ->condition('uid', $user->uid, '=')
            ->execute()
            ->fetchAssoc();
    if ($cat_value[1] >= $userpoints['points']) {
      form_set_error('field_select_category', 'You don\'t have sufficient points');
    }
  }
}

function maintain_points_submit_callback_function($form, &$form_state) {
  global $user;
  if (in_array('customer', $user->roles)) {
    $value = $form_state['values']['field_select_category']['und'][0]['value'];
    $cat_value = explode('--', $value);
    //select userpoints
    $userpoints = db_select('userpoints', 'u')
            ->fields('u', array('points'))
            ->condition('uid', $user->uid, '=')
            ->execute()
            ->fetchAssoc();
    if ($cat_value[1] <= $userpoints['points']) {
      $reduce_points = $userpoints['points'] - $cat_value[1];
      db_update('userpoints')
              ->fields(array(
                  'points' => $reduce_points,
              ))
              ->condition('uid', $user->uid, '=')
              ->execute();
    }
  }
}
